@inject UserManager<User> UserManager
@{
    bool isAdmin = await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "SuperAdmin");
}
<h1>Admin Panel</h1>
<div>
    <form method="post">
        @if (isAdmin)
        {
            <button type="submit" class="btn btn-info" asp-controller="RoleManager" asp-action="Index">Role Manager</button>
        }
        <button type="submit" class="btn btn-primary" asp-controller="UserRoles" asp-action="CreateUser">Create User</button>
    </form>
    <table class="table table-striped" id="tableu">
        <thead>
            <tr>
                <th>User Name</th>
                <th>Email</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Roles</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <form method="post">
        <button type="submit" class="btn btn-info" asp-controller="GenreManage" asp-action="Index">Genre Manager</button>
        <button type="submit" class="btn btn-info" asp-controller="DisciplinManage" asp-action="Index">Discipline Manager</button>
        <button type="submit" class="btn btn-info" asp-controller="SpecialtyManage" asp-action="Index">Specialty Manager</button>
        <button type="submit" class="btn btn-primary" asp-controller="UserRoles" asp-action="CreateBook">Create Book</button>
    </form>
    <table class="table table-striped" id="tableb">
        <thead>
            <tr>
                <th>Picture</th>
                <th>Book Name</th>
                <th>Autor</th>
                <th>Year</th>
                <th>Articl</th>
                <th>Genre</th>
                <th>Discipline</th>
                <th>Specialty</th>
                <th>Count</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <form method="post">
        <button type="submit" class="btn btn-info" asp-controller="StatusManager" asp-action="Index">Status Manager</button>
    </form>
    <table class="table table-striped" id="tablel">
        <thead>
            <tr>
                <th>Date</th>
                <th>Book</th>
                <th>User</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
    </table>
</div>
<script src='@Url.Content("~/lib/jquery/dist/jquery.js")' type="text/javascript"></script>
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.js"></script>
<script>

    InitPage();
    function InitPage() {
        $.ajax({
            type: "Get",
            url: '@Url.Action("ReturnUser", "UserRoles")',
            success: function (data) {
                $('#tableu').DataTable({
                    data: data,
                    columns: [
                        { data: 'user.userName' },
                        { data: 'user.email' },
                        { data: 'user.firstName' },
                        { data: 'user.lastName' },
                        { data: 'role' },
                        { data: 'user.id'}
                    ],
                    columnDefs: [{
                        targets: 5,
                        orderable: false,
                        className: 'button',
                        render: function (data, type, row, meta) {
                            return '@(isAdmin)' === '@true'?
                            `<a class="btn btn-primary" href="/UserRoles/EditUser?userId=${data}">Edit</a>
                            <a class="btn btn-primary" href="/UserRoles/EditP?userId=${data}">Edit Pass</a>
                            <a class="btn btn-info" href="/UserRoles/Manage?userId=${data}">Manage Roles</a>
                            <a class="btn btn-danger" href="@Url.Action("DeleteUser","UserRoles")?userId=${data}">Delete</a>` :
                            `<a class="btn btn-primary" href="/UserRoles/EditUser?userId=${data}">Edit</a>
                            <a class="btn btn-danger" href="@Url.Action("DeleteUser","UserRoles")?userId=${data}">Delete</a>`;
                        }
                    }],
                    order: [[1, 'asc']]
                })
            }
        });
        $.ajax({
            type: "Get",
            url: '@Url.Action("ReturnBook", "UserRoles")',
            success: function (data) {
                $('#tableb').DataTable({
                    data: data,
                    columns: [
                        { data: 'bookPicture' },
                        { data: 'name' },
                        { data: 'author' },
                        { data: 'year' },
                        { data: 'articl' },
                        { data: 'bookGenres' },
                        { data: 'bookDiscs' },
                        { data: 'bookSpecs' },
                        { data: 'count' },
                        { data: 'id' },
                    ],
                    columnDefs: [{
                        targets: 9,
                        orderable: false,
                        className: 'button',
                        render: function (data, type, row, meta) {
                            return ` <a class="btn btn-primary" href="/UserRoles/EditBook?bookId=${data}">Edit</a>
                            <a class="btn btn-danger" href="@Url.Action("DeleteBook", "UserRoles")?bookId=${data}">Delete</a>`;
                        }
                    },
                        {
                            targets: 0,
                            orderable: false,
                            render: function (data, type, row, meta) {
                                return `<img style="width:40px;height:40px; object-fit:cover; border-radius:30px" src="${data}"/>`;
                            }
                        },
                        {
                            targets: 5,
                            orderable: false,
                            render: function (data, type, row, meta) {
                                return `${data.map(item=>item.genre.genreName)}`;
                            }
                        },
                        {
                            targets: 6,
                            orderable: false,
                            render: function (data, type, row, meta) {
                                return `${data.map(item => item.discipline.nameDiscipline)}`;
                            }
                        },
                        {
                            targets: 7,
                            orderable: false,
                            render: function (data, type, row, meta) {
                                return `${data.map(item => item.specialty.nameSpecialty)}`;
                            }
                        }
                    ],
                    order: [[1, 'asc']]
                })
            }
        });
        $.ajax({
            type: "Get",
            url: '@Url.Action("GetLoan", "UserRoles")',
            success: function (data) {
                console.log(data);
                $('#tablel').DataTable({
                    data: data,
                    columns: [
                        { data: 'date' },
                        { data: 'book.name' },
                        { data: 'user' },
                        { data: 'status.statusName' },
                        { data: 'id'}

                    ],
                    columnDefs: [{
                        targets: 0,
                        render: function (data, type, row, meta) {
                            var date = new Date(data);
                            var dd = date.getDate();
                            if (dd < 10) dd = '0' + dd;

                            var mm = date.getMonth() + 1;
                            if (mm < 10) mm = '0' + mm;

                            var yy = date.getFullYear();
                            if (yy < 10) yy = '0' + yy;

                            return dd + '.' + mm + '.' + yy + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
                        }
                    },
                        {
                        targets: 2,
                        render: function (data, type, row, meta) {
                            return `<p>${data.lastName} ${data.firstName}</p>`;
                        }
                    },
                        {
                            targets: 4,
                            orderable: false,
                            render: function (data, type, row, meta) {
                                return `<a class="btn btn-info" href="@Url.Action("AcceptLoan","UserRoles")?loanId=${data}">Accept</a>
                                <a class="btn btn-info" href="@Url.Action("ReturnLoan","UserRoles")?loanId=${data}">Return</a>
                                <a class="btn btn-danger" href="@Url.Action("DeleteLoan","UserRoles")?loanId=${data}">Cancle</a>`;
                            }
                        }],
                    order: [[0, 'desc']]
                })
            }
        });
    }
</script>